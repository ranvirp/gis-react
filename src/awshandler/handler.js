// const axios = require('axios')
// const url = 'http://checkip.amazonaws.com/';
let response;

/**
 *
 * Event doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-input-format
 * @param {Object} event - API Gateway Lambda Proxy Input Format
 *
 * Context doc: https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html 
 * @param {Object} context
 *
 * Return doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
 * @returns {Object} object - API Gateway Lambda Proxy Output Format
 * 
 */
const path = require("path");

import React from 'react';
import ReactDOMServer from 'react-dom/server';
import App from '../components/App'
//import reportWebVitals from './reportWebVitals';
import 'bootstrap/dist/css/bootstrap.min.css';
import { ChunkExtractor } from '@loadable/server'
// This is the stats file generated by webpack loadable plugin
const statsFile = path.resolve('loadable-stats.json')
// We create an extractor from the statsFile
const extractor = new ChunkExtractor({ statsFile })
// Wrap your application using "collectChunks"
const jsx = extractor.collectChunks(<App />)
// Render your application
const html1 = ReactDOMServer.renderToString(jsx)
const indexFile = `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <title>React App</title>
    
        ${extractor.getLinkTags()}
        ${extractor.getStyleTags()}
       
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <div>Rendered on Server</div>
  </body>
  ${extractor.getScriptTags()}
</html>`;
const app = ReactDOMServer.renderToString( <React.StrictMode>
    <App />
</React.StrictMode>);
const html = indexFile.replace(
    '<div id="root"></div>',
    `<div id="root">${app}</div>`
);

const lambdaHandler = async (event, context) => {
    try {
        // const ret = await axios(url);

        response = {
            statusCode: 200,
            headers: { "Content-Type": "text/html" },
            body: html
        };

    } catch (err) {
        console.log(err);
        return err;
    }
    console.log(extractor.getScriptTags())
    return response
};
export {lambdaHandler};
